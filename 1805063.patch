diff --git a/Makefile b/Makefile
index cd9bd04..985749d 100644
--- a/Makefile
+++ b/Makefile
@@ -128,6 +128,8 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_testticket\
+	$U/_testproc\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index 3032578..bb9c73d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+//tickets
+int             settickets(int);
+int             getpinfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 798e4a7..5bbf0d2 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,7 +125,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
-
+  //defult ticket
+  p->c_ticket=p->o_ticket=1;
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -301,7 +303,8 @@ fork(void)
 
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
-
+  //ticket transfer
+  np->c_ticket=np->o_ticket=p->o_ticket;
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
@@ -441,6 +444,75 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+//ticket setting
+
+static unsigned long int next = 1; 
+
+int rand(void) // RAND_MAX assumed to be 32767 
+{ 
+    next = next * 1103515245 + 12345; 
+    return (unsigned int)(next/65536) % 32768; 
+}
+int
+settickets(int num){
+
+  struct proc* p=myproc();
+  acquire(&p->lock);
+  
+  p->o_ticket=num;
+  p->c_ticket=num;
+  release(&p->lock);
+  //printf("%d\n",rand());
+  return 0;
+}
+int
+getpinfo(uint64 info){
+
+  
+  int i=0;
+  struct proc* p;
+  struct pstat ps;
+  //printf("%d\n",ps);
+
+  for(p=proc; p < &proc[NPROC] ; p++){
+      
+        acquire(&p->lock);
+        ps.pid[i]=p->pid;
+        ps.inuse[i]=p->state!= UNUSED;
+        ps.tickets_current[i]=p->c_ticket;
+        ps.tickets_original[i]=p->o_ticket;
+        ps.time_slices[i]=p->time_slice;
+        i++;
+        release(&p->lock);
+     
+  }
+  struct proc* cp=myproc();
+  acquire(&cp->lock);
+  if(copyout(cp->pagetable,info, (char *)&ps, sizeof(ps)) < 0){
+    release(&cp->lock);
+    return -1;
+  }
+  release(&cp->lock); 
+
+  return 0;
+}
+
+int 
+add_all_current(){
+  struct proc* p;
+  int total_cur_tic=0;
+  for(p=proc;p<&proc[NPROC];p++){
+    acquire(&p->lock);
+    if(p->state==RUNNABLE){
+      total_cur_tic+=p->c_ticket;
+    }
+
+    release(&p->lock);
+  }
+  return total_cur_tic;
+}
+
+
 void
 scheduler(void)
 {
@@ -451,6 +523,21 @@ scheduler(void)
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+    //checking if all tictes zero
+    int total_cur_ticket=0;
+    if(add_all_current()==0){
+      for(p=proc;p<&proc[NPROC];p++){
+        acquire(&p->lock);
+        if(p->state==RUNNABLE){
+          p->c_ticket=p->o_ticket;
+        }
+        release(&p->lock);
+      }
+    }
+    //total ticket count and random val in them
+    total_cur_ticket=add_all_current();
+    int cur_ticket_count=0;
+    int random_val=rand()%total_cur_ticket;
 
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
@@ -458,19 +545,64 @@ scheduler(void)
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
+        //increase count
+        cur_ticket_count+=p->c_ticket;
+        //check with rand
+        if(cur_ticket_count>random_val){
+          //update cur ticket
+          p->c_ticket--;
+          p->time_slice++;
+
+
+          p->state = RUNNING;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+          release(&p->lock);
+          break;
+        }
+        
+
 
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+        
       }
       release(&p->lock);
     }
   }
 }
 
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+  
+//   c->proc = 0;
+//   for(;;){
+//     // Avoid deadlock by ensuring that devices can interrupt.
+//     intr_on();
+
+//     for(p = proc; p < &proc[NPROC]; p++) {
+//       acquire(&p->lock);
+//       if(p->state == RUNNABLE) {
+//         // Switch to chosen process.  It is the process's job
+//         // to release its lock and then reacquire it
+//         // before jumping back to us.
+//         p->state = RUNNING;
+//         c->proc = p;
+//         swtch(&c->context, &p->context);
+
+//         // Process is done running for now.
+//         // It should have changed its p->state before coming back.
+//         c->proc = 0;
+//       }
+//       release(&p->lock);
+//     }
+//   }
+// }
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
diff --git a/kernel/proc.h b/kernel/proc.h
index 50704f1..8169217 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int o_ticket;
+  int c_ticket;
+  int time_slice;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..c80a671
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 0a44b02..f07ea61 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]  sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index ceffabe..c03b07f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22 
+#define SYS_getpinfo    23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index af368c3..bcf2844 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,34 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_settickets(void)
+{
+  int num;
+  int x;
+  argint(0,&num);
+  if(num>0){
+    x= settickets(num);
+    
+  }
+  else if(num<0){
+    return -1;
+    /* code */
+  }
+  else{
+    x= settickets(1); //default value
+    
+  }
+  
+  
+  return x;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 info;
+  argaddr(0,&info);
+  return getpinfo(info);
+  
+}
\ No newline at end of file
diff --git a/user/testproc.c b/user/testproc.c
new file mode 100644
index 0000000..2e20bdb
--- /dev/null
+++ b/user/testproc.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc, char *argv[])
+{
+    struct pstat ps;
+    
+    getpinfo(&ps);
+    printf( "\nPID\tINUSE\tO T\t C T\tTime Slice\n");
+    for (int i = 0; i < NPROC; i++)
+    {
+        
+        if(ps.inuse[i]==1){
+            printf("%d\t%d\t%d\t%d\t%d\n", ps.pid[i], ps.inuse[i], ps.tickets_original[i], ps.tickets_current[i],ps.time_slices[i]);
+        }
+            
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..5ef9582
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,49 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int main(int argc, char * argv[])
+{
+   
+    
+    int number = atoi(argv[1]);
+    settickets(number);
+    printf( "test_Ticket%d\n",number);
+    // int val = fork();
+    // if(val>0){
+    //     printf("child proc %d\n",val);
+    // }
+    
+    while(1){
+
+    }
+    
+    
+    return 0;//eq to return zero
+
+    /**
+     * 
+     * fork test
+     * 
+     **/
+
+
+    // printf(1, "testFork\n");
+    
+    // int number = atoi(argv[1]);
+    // settickets(number);
+
+    // int val = fork();
+
+    // if(val == 0) printf(1,"\nFork successful\n");
+    // else if (val < 0) printf(1,"\nFork unsuccessful\n");
+
+    // while (1)
+    // {
+    //     /* code */
+    // }
+    
+    // exit();//eq to return zero
+
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index e2c7819..90f0072 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct pstat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+//system call for getpinfo and settickets
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 7dad16d..4e37f85 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
